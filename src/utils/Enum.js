/**
 * @file Defines the `Enum` class that can create an Enum type to subclass.
 *
 * Definitions:
 *  - value: The result of `Color.RED.value`. Needs to be unique.
 *  - key: 'RED' for `Color.RED`. Generated by `_toKey`.
 *  - label: The label to display in a dropdown.
 *
 * Usage:
 *
 * class Color extends Enum {
 *     // any methods as usual
 * }
 * Color.initEnum([
 *   'red',
 *   'blue',
 *   { value: 'green', label: 'Greeny' },
 * ]);
 *
 * Color.RED === Color.RED
 * Color.fromValue('red') === Color.RED
 * Color.fromValue(Color.RED) === Color.RED
 * Color.BLUE.value === 'blue'
 * Color.BLUE.label === 'BLUE'
 * Color.GREEN.value === 'green'
 * Color.GREEN.label === 'Greeny'
 * Color.values === [Color.RED, Color.BLUE, Color.GREEN]
 */

import {
    capitalize,
    defaults,
    has,
    isNil,
    isPlainObject,
    isString,
} from 'lodash';

import { createInstance } from 'utils/classes';
import Serializable from 'utils/Serializable';

export default class Enum extends Serializable {
    constructor() {
        // https://github.com/babel/babel/issues/6370
        super({}, {});
        throw new Error('Cannot instantiate an Enum class');
    }

    /**
     * Get all the values in the Enum.
     *
     * @type {Enum[]}
     */
    static get values() {
        return this._values;
    }

    /**
     * Convert a value into the corresponding Enum value.
     *
     * @param {string|Enum} v
     * @return {Enum}
     */
    static fromValue(v) {
        if (isNil(v) || v instanceof this) {
            return v;
        } else {
            let key = this._toKey(v);
            if (has(this, key)) {
                return this[key];
            } else {
                throw new Error(`Invalid value: ${v}`);
            }
        }
    }

    /**
     * Initialize this Enum class with the given instance definitions.
     *
     * See usage for an example. The instance definitions could either be an
     * Object or a string.
     * - If an Object, the `value` property is required. The `label` property
     *   may also be optionally provided, along with any other properties to set
     *   for the specific instance.
     * - If a string, uses it as the value of the Enum instance.
     *
     * @param {Array<Object|string>} instances
     * @return {Class}
     */
    static initEnum(instances) {
        this._values = instances.map(instance => {
            if (isString(instance)) {
                instance = { value: instance };
            } else if (isPlainObject(instance)) {
                if (!has(instance, 'value')) {
                    throw new Error('Enum instances need `value` defined.');
                }
            } else {
                throw new Error(`Invalid instance definition: ${instance}`);
            }

            // add additional properties/methods to the instance definition
            defaults(instance, {
                key: this._toKey(instance.value),
                label: this._toDefaultLabel(instance.value),
            });

            // The Enum instance; i.e. the result of Color.RED
            let enumValue = createInstance(this, instance);

            // Setting Color.RED
            Object.defineProperty(this, instance.key, { value: enumValue });

            return enumValue;
        });
    }

    /**
     * @param {Object} data
     * @param {Show} show
     * @return {Enum}
     */
    static _deserialize(data, show) {
        return this.fromValue(data.value);
    }

    /**
     * Get the default label for the given value.
     *
     * @param {string} v
     * @return {string}
     */
    static _toDefaultLabel(v) {
        return capitalize(v).replace(/[-_]+/g, ' ');
    }

    /**
     * Get the default key for the given value.
     *
     * @param {string} v
     * @return {string}
     */
    static _toKey(v) {
        return v.toUpperCase().replace(/[\s-]+/g, '_');
    }

    /**
     * Overriding the default clone, because Enums shouldn't be cloned.
     *
     * @return {Object}
     */
    clone() {
        return this;
    }

    /**
     * @return {Object}
     */
    _serialize() {
        return { value: this.value };
    }
}
